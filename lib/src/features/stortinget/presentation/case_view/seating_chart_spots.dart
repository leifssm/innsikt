import 'dart:math';

typedef Seat = (double x, double y);

const generatedSeats = <Seat>[
  (3.8, 0.0),
  (3.4, 0.0),
  (3.0, 0.0),
  (2.6, 0.0),
  (2.2, 0.0),
  (1.8, 0.0),
  (1.4, 0.0),
  (1.0, 0.0),
  (3.78, 0.37),
  (3.38, 0.36),
  (2.97, 0.37),
  (2.57, 0.35),
  (2.16, 0.36),
  (3.72, 0.74),
  (1.76, 0.37),
  (3.32, 0.73),
  (2.9, 0.74),
  (2.5, 0.7),
  (1.34, 0.39),
  (3.63, 1.1),
  (3.22, 1.08),
  (2.08, 0.71),
  (2.78, 1.1),
  (3.51, 1.45),
  (2.38, 1.03),
  (1.64, 0.73),
  (3.08, 1.42),
  (0.9, 0.43),
  (3.35, 1.79),
  (1.93, 1.04),
  (2.62, 1.44),
  (2.91, 1.75),
  (2.22, 1.35),
  (1.17, 0.75),
  (3.15, 2.11),
  (2.42, 1.76),
  (1.45, 1.05),
  (2.7, 2.05),
  (1.73, 1.35),
  (2.93, 2.41),
  (2.01, 1.64),
  (2.46, 2.33),
  (2.18, 2.05),
  (2.68, 2.68),
  (1.77, 1.9),
  (1.49, 1.61),
  (1.2, 1.33),
  (0.91, 1.05),
  (2.2, 2.59),
  (2.41, 2.93),
  (1.91, 2.31),
  (0.62, 0.78),
  (1.49, 2.12),
  (2.11, 3.15),
  (1.9, 2.81),
  (1.2, 1.84),
  (1.6, 2.53),
  (0.9, 1.55),
  (1.79, 3.35),
  (1.59, 3.0),
  (1.19, 2.3),
  (1.27, 2.71),
  (0.58, 1.27),
  (0.88, 2.01),
  (1.45, 3.51),
  (1.25, 3.15),
  (0.87, 2.44),
  (0.92, 2.85),
  (0.55, 1.71),
  (1.1, 3.63),
  (0.9, 3.27),
  (0.54, 2.13),
  (0.22, 0.97),
  (0.74, 3.72),
  (0.52, 2.54),
  (0.56, 2.94),
  (0.55, 3.35),
  (0.19, 1.38),
  (0.37, 3.78),
  (0.18, 1.79),
  (0.18, 2.19),
  (0.18, 2.99),
  (0.17, 2.59),
  (0.18, 3.39),
  (0.0, 3.8),
  (-0.19, 3.39),
  (-0.19, 2.99),
  (-0.18, 2.59),
  (-0.19, 2.19),
  (-0.38, 3.78),
  (-0.19, 1.79),
  (-0.2, 1.38),
  (-0.56, 3.35),
  (-0.57, 2.94),
  (-0.75, 3.72),
  (-0.53, 2.54),
  (-0.23, 0.97),
  (-0.55, 2.13),
  (-0.91, 3.27),
  (-1.11, 3.63),
  (-0.93, 2.85),
  (-0.56, 1.71),
  (-0.88, 2.44),
  (-1.26, 3.15),
  (-1.46, 3.51),
  (-0.89, 2.01),
  (-0.59, 1.27),
  (-1.28, 2.71),
  (-1.2, 2.3),
  (-1.8, 3.35),
  (-1.6, 3.0),
  (-0.9, 1.55),
  (-1.61, 2.53),
  (-1.21, 1.84),
  (-2.12, 3.15),
  (-1.91, 2.81),
  (-1.5, 2.12),
  (-0.63, 0.78),
  (-2.42, 2.93),
  (-1.92, 2.31),
  (-2.21, 2.59),
  (-0.92, 1.05),
  (-1.21, 1.33),
  (-1.78, 1.9),
  (-1.5, 1.61),
  (-2.69, 2.68),
  (-2.47, 2.33),
  (-2.19, 2.05),
  (-2.94, 2.41),
  (-2.02, 1.64),
  (-1.74, 1.35),
  (-2.71, 2.05),
  (-2.43, 1.76),
  (-1.46, 1.05),
  (-3.16, 2.11),
  (-1.18, 0.75),
  (-2.92, 1.75),
  (-2.23, 1.35),
  (-2.63, 1.44),
  (-3.36, 1.79),
  (-1.94, 1.04),
  (-0.91, 0.43),
  (-3.09, 1.42),
  (-1.65, 0.73),
  (-2.39, 1.03),
  (-3.52, 1.45),
  (-2.79, 1.1),
  (-3.23, 1.08),
  (-2.09, 0.71),
  (-3.64, 1.1),
  (-1.35, 0.39),
  (-2.51, 0.7),
  (-2.91, 0.74),
  (-3.33, 0.73),
  (-1.77, 0.37),
  (-3.73, 0.74),
  (-2.17, 0.36),
  (-2.58, 0.35),
  (-2.98, 0.37),
  (-3.39, 0.36),
  (-3.79, 0.37),
  (-3.8, 0.0),
  (-3.41, 0.0),
  (-3.0, 0.0),
  (-2.6, 0.0),
  (-2.21, 0.0),
  (-1.8, 0.0),
  (-1.4, 0.0),
  (-1.0, 0.0),
];

void printSeats(List<Seat> seats) {
  for (final (x, y) in seats) {
    print('($x, $y),');
  }
}

const parlementSeatRows = [8, 12, 16, 20, 24, 26, 30, 33];

List<Seat> generateSeats() {
  const scaling = 0.4;

  final seatsTemp = <Seat>[];

  double round(double d) => (d * 100).floorToDouble() / 100;

  for (var i = 0; i < parlementSeatRows.length; i++) {
    final amount = parlementSeatRows[i];
    for (var j = 0; j < amount; j++) {
      final x = round(((scaling * i) + 1) * cos(pi * (j / (amount - 1))));
      final y = round(((scaling * i) + 1) * sin(pi * (j / (amount - 1))));
      seatsTemp.add((x, y));
    }
  }

  assert(
    seatsTemp.length == 169,
    "The generated seats must match the expected count of 169.",
  );

  return seatsTemp;
}

void sort(List<Seat> seats) {
  seats.sort((a, b) {
    final angleA = atan2(a.$2, a.$1);
    final angleB = atan2(b.$2, b.$1);

    final angleOfDifferentiaion = pi / (parlementSeatRows.last * 16);

    final similar = (angleA - angleB).abs() < angleOfDifferentiaion;

    if (!similar) return angleA.compareTo(angleB);

    final distanceA = sqrt(a.$1 * a.$1 + a.$2 * a.$2);
    final distanceB = sqrt(b.$1 * b.$1 + b.$2 * b.$2);

    return distanceB.compareTo(distanceA);
  });
}

List<Seat> generateAndSortSeats() {
  final seats = generateSeats();
  sort(seats);
  return seats;
}

void main(List<String> args) {
  final seats = generateAndSortSeats();
  for (final (x, y) in seats) {
    print('  ($x, $y),');
  }
}