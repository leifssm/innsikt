import 'dart:math';

import 'package:get/get.dart';

typedef Seat = (double x, double y);

const generatedSeats = <Seat>[
  (2.2, 0.0),
  (2.0, 0.0),
  (1.8, 0.0),
  (1.6, 0.0),
  (1.4, 0.0),
  (1.2, 0.0),
  (1.0, 0.0),
  (2.19, 0.21),
  (1.99, 0.19),
  (1.79, 0.19),
  (1.59, 0.2),
  (2.16, 0.42),
  (1.96, 0.38),
  (1.76, 0.39),
  (1.38, 0.26),
  (1.18, 0.22),
  (2.11, 0.62),
  (1.92, 0.56),
  (1.55, 0.4),
  (1.71, 0.57),
  (2.04, 0.82),
  (1.86, 0.74),
  (1.49, 0.59),
  (1.31, 0.51),
  (1.12, 0.43),
  (0.92, 0.38),
  (1.96, 1.01),
  (1.78, 0.92),
  (1.63, 0.76),
  (1.54, 0.93),
  (1.4, 0.77),
  (1.85, 1.19),
  (1.68, 1.08),
  (1.19, 0.74),
  (1.02, 0.63),
  (1.73, 1.36),
  (1.57, 1.24),
  (1.43, 1.09),
  (1.29, 0.94),
  (1.59, 1.52),
  (1.45, 1.38),
  (1.31, 1.24),
  (1.17, 1.1),
  (1.03, 0.94),
  (0.89, 0.81),
  (0.71, 0.71),
  (1.44, 1.66),
  (1.31, 1.51),
  (1.17, 1.37),
  (1.02, 1.23),
  (1.28, 1.79),
  (1.16, 1.63),
  (0.84, 1.12),
  (0.72, 0.96),
  (1.01, 1.49),
  (1.1, 1.91),
  (1.0, 1.73),
  (0.86, 1.35),
  (0.84, 1.59),
  (0.91, 2.0),
  (0.83, 1.82),
  (0.68, 1.45),
  (0.62, 1.25),
  (0.53, 1.07),
  (0.67, 1.67),
  (0.38, 0.92),
  (0.72, 2.08),
  (0.65, 1.89),
  (0.49, 1.52),
  (0.52, 2.14),
  (0.47, 1.94),
  (0.48, 1.73),
  (0.38, 1.35),
  (0.33, 1.15),
  (0.31, 2.18),
  (0.28, 1.98),
  (0.29, 1.78),
  (0.3, 1.57),
  (0.1, 2.0),
  (0.1, 1.8),
  (0.1, 1.6),
  (0.13, 1.39),
  (0.11, 1.19),
  (0.1, 2.2),
  (-0.1, 2.2),
  (0.0, 1.0),
  (-0.1, 2.0),
  (-0.1, 1.8),
  (-0.1, 1.6),
  (-0.13, 1.39),
  (-0.11, 1.19),
  (-0.31, 2.18),
  (-0.28, 1.98),
  (-0.29, 1.78),
  (-0.3, 1.57),
  (-0.52, 2.14),
  (-0.47, 1.94),
  (-0.48, 1.73),
  (-0.49, 1.52),
  (-0.38, 1.35),
  (-0.33, 1.15),
  (-0.72, 2.08),
  (-0.65, 1.89),
  (-0.91, 2.0),
  (-0.67, 1.67),
  (-0.83, 1.82),
  (-0.38, 0.92),
  (-0.68, 1.45),
  (-0.62, 1.25),
  (-0.53, 1.07),
  (-1.1, 1.91),
  (-1.0, 1.73),
  (-0.84, 1.59),
  (-1.01, 1.49),
  (-0.86, 1.35),
  (-1.28, 1.79),
  (-1.16, 1.63),
  (-0.84, 1.12),
  (-0.72, 0.96),
  (-1.44, 1.66),
  (-1.31, 1.51),
  (-1.17, 1.37),
  (-1.02, 1.23),
  (-1.59, 1.52),
  (-1.45, 1.38),
  (-1.31, 1.24),
  (-1.17, 1.1),
  (-1.03, 0.94),
  (-0.71, 0.71),
  (-0.89, 0.81),
  (-1.73, 1.36),
  (-1.57, 1.24),
  (-1.43, 1.09),
  (-1.29, 0.94),
  (-1.85, 1.19),
  (-1.68, 1.08),
  (-1.54, 0.93),
  (-1.19, 0.74),
  (-1.02, 0.63),
  (-1.96, 1.01),
  (-1.78, 0.92),
  (-1.4, 0.77),
  (-1.63, 0.76),
  (-2.04, 0.82),
  (-1.86, 0.74),
  (-1.49, 0.59),
  (-1.31, 0.51),
  (-1.71, 0.57),
  (-1.12, 0.43),
  (-0.92, 0.38),
  (-2.11, 0.62),
  (-1.92, 0.56),
  (-1.96, 0.38),
  (-1.76, 0.39),
  (-1.55, 0.4),
  (-2.16, 0.42),
  (-1.38, 0.26),
  (-1.18, 0.22),
  (-2.19, 0.21),
  (-1.99, 0.19),
  (-1.79, 0.19),
  (-1.59, 0.2),
  (-2.2, 0.0),
  (-2.0, 0.0),
  (-1.8, 0.0),
  (-1.6, 0.0),
  (-1.4, 0.0),
  (-1.2, 0.0),
  (-1.0, 0.0),
];

void printSeats(List<Seat> seats) {
  for (final (x, y) in seats) {
    print('($x, $y),');
  }
}

const parlementSeatRows = [9, 18, 18, 26, 30, 34, 34];

List<Seat> generateSeats() {
  const scaling = 0.2;

  final seatsTemp = <Seat>[];

  for (var i = 0; i < parlementSeatRows.length; i++) {
    final amount = parlementSeatRows[i];
    for (var j = 0; j < amount; j++) {
      final x = ((i * scaling + 1) * cos(pi * (j / (amount - 1)))).toPrecision(2);
      final y = ((i * scaling + 1) * sin(pi * (j / (amount - 1)))).toPrecision(2);
      seatsTemp.add((x, y));
    }
  }

  assert(
    seatsTemp.length == 169,
    "The generated seats must match the expected count of 169.",
  );

  return seatsTemp;
}

void sort(List<Seat> seats) {
  seats.sort((a, b) {
    final angleA = atan2(a.$2, a.$1);
    final angleB = atan2(b.$2, b.$1);

    final angleOfDifferentiaion = pi / (parlementSeatRows.last * 2);

    final similar = (angleA - angleB).abs() < angleOfDifferentiaion;

    if (!similar) return angleA.compareTo(angleB);

    final distanceA = sqrt(a.$1 * a.$1 + a.$2 * a.$2);
    final distanceB = sqrt(b.$1 * b.$1 + b.$2 * b.$2);

    return distanceB.compareTo(distanceA);
  });
}

void generateAndSortSeats() {
  final seats = generateSeats();
  sort(seats);
  for (final (x, y) in seats) {
    print('($x, $y),');
  }
}